# Get the machine tentacle thumbprint so we can register it in Octopus
- name: Get Octopus Tentacle Thumbprint
  win_shell: |
    cd "C:\Program Files\Octopus Deploy\Tentacle"
    .\Tentacle.exe show-thumbprint --instance "Tentacle" --nologo
  register: tentacle_thumbprint
  tags: ["install-octopus"]
- debug:
    var: tentacle_thumbprint

- name: Set octopusEnvironment variables to what script expects
  set_fact:
    octopusEnvironment: "{{ octopus_tentacle.octopusEnvironment }}"
    octopusRolesList: "{{ octopus_tentacle.octopusRolesList }}"
    octopus_server_url: "{{ octopus_server_http_or_https }}://{{ octopus_server_fqdn }}"

- name: Display our Octopus Facts
  debug:
    msg:
      - "octopusEnvironment: {{ octopusEnvironment }}"
      - "octopusRolesList: {{ octopusRolesList }}"
      - "octopus_server_http_or_https: {{ octopus_server_http_or_https }}"
      - "octopus_server_fqdn: {{ octopus_server_fqdn }}"
      - "octopus_server_api_key: {{ octopus_server_api_key }}"
      - "tentacle_service_port: {{ tentacle_service_port }}"

###################################################################################################
# Create Environment in Octopus Deploy if it doesn't exist. Assume main space, but meh
- name: Create Environment in Octopus Deploy if it doesn't exist
  win_shell: |
    $OctopusUrl = "{{ octopus_server_http_or_https }}://{{ octopus_server_fqdn }}"
    $APIKey = "{{ octopus_server_api_key }}"
    $EnvironmentName = "{{ octopusEnvironment }}"
    $header = @{ "X-Octopus-ApiKey" = $APIKey }

    # Getting the existing environments
    $environments = (Invoke-RestMethod "$OctopusUrl/api/{{ octopus_space_id }}/environments?skip=0&take=100000" -Headers $header)

    # Check if the environment exists
    $environmentExists = $environments.Items | Where-Object {$_.name -Like "*$EnvironmentName*"}
    if ($environmentExists) {
        Write-Host "Environment '$($environmentExists.Name)' Exists. Not creating"
    }
    else {
        Write-Host "Environment '$EnvironmentName' Does Not Exist. Creating"
        $body = @{ Name = $EnvironmentName } | ConvertTo-Json -Depth 10
        Invoke-RestMethod "$OctopusUrl/api/environments" -Headers $header -Method Post -Body $body
    }
  tags: ["install-octopus"]

##########################################################################################
# Register Tentacle. Run on the internal remote server. It should have powershell
- name: Register Tentacle from the remote VM as it should have line of sight to the Octopus Server
  win_shell: |
    $OctopusUrl = "{{ octopus_server_http_or_https }}://{{ octopus_server_fqdn }}"
    $APIKey = "{{ octopus_server_api_key }}"
    $TentacleURL = "https://{{ inventory_hostname }}"
    $TentaclePort = "{{ tentacle_service_port }}"
    $TentacleThumbprint = "{{ tentacle_thumbprint.stdout }}"
    $TentacleName       = "{{ inventory_hostname_short }}"
    $EnvironmentName    = "{{ octopusEnvironment }}"
    $TentacleRoles      = "{{ octopusRolesList }}"
    $TentacleRoles      = $TentacleRoles -replace "'","" -replace '"','' -replace ']','' -replace '\[','' -split ","
    $TentacleRoles      = $TentacleRoles.trim()
    Write-Host "Roles Are: $($TentacleRoles)"
    
    # Authenticating to the API
    $header = @{ "X-Octopus-ApiKey" = $APIKey }

    # Getting the existing machines and environments
    Write-Host "Getting list of machines: $OctopusUrl/api/machines?skip=0&take=100000"
    $machines = (Invoke-RestMethod "$OctopusUrl/api/machines?skip=0&take=100000" -Headers $header)
    $environments = (Invoke-RestMethod "$OctopusUrl/api/environments?skip=0&take=100000" -Headers $header)

    # Get the environments ID from its name
    foreach ($environment in $environments.items) {
        if ($environment.name -like "*$EnvironmentName*") {
        $EnvironmentID = $environment.id
        }
    }
    if ($EnvironmentID -eq $null) {
        throw "Couldnt find environment '$EnvironmentName' for VM"
    } else {
        Write-Host "Environment '$EnvironmentName' ID is '$EnvironmentID'"
    }

    Write-Host " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
    $machineExists = $machines.Items | Where-Object {$_.name -Like "*$TentacleName*"}
    if ($machineExists) {
        Write-Host "Machine '$($machineExists.Name)' Exists. Not registering"
    }
    else {
        # .\Tentacle.exe register-with --instance "Tentacle" --server "{{ octopus_server_http_or_https }}://{{ octopus_server_fqdn }}" --apiKey="{{ octopus_server_api_key }}" --role $TentacleRoles --environment $EnvironmentName --comms-style TentaclePassive --console    
        Write-Host "Machine '$TentacleName' Does Not Exist. Registering"
        
        # https://github.com/OctopusDeploy/OctopusDeploy-Api/blob/master/REST/PowerShell/Targets/RegisterTentacle.ps1
        $header = @{ "X-Octopus-ApiKey" = $APIKey }

        $body = @{ Endpoint = @{
                                CommunicationStyle = "TentaclePassive" #This will only work for Listening Tentacles
                                Thumbprint = $TentacleThumbprint
                                Uri = "$tentacleURL`:$TentaclePort/"
                                }
                    EnvironmentIDs = @($EnvironmentID)
                    Name = $TentacleName
                    Roles = @($TentacleRoles)
                    Status = "Unknown"
                    IsDisabled = $false
                } | ConvertTo-Json -Depth 10

        Invoke-RestMethod "$OctopusURL/api/machines" -Headers $header -Method Post -Body $body
    }
    Write-Host " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
  tags: ["install-octopus"]
